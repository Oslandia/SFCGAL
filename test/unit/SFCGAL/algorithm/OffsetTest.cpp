#include <boost/test/unit_test.hpp>

#include <SFCGAL/Kernel.h>
#include <SFCGAL/all.h>
#include <SFCGAL/io/wkt.h>
#include <SFCGAL/algorithm/offset.h>


using namespace boost::unit_test ;
using namespace SFCGAL ;

BOOST_AUTO_TEST_SUITE( SFCGAL_algorithm_OffsetTest )

BOOST_AUTO_TEST_CASE( testSimple )
{
	std::auto_ptr< Geometry > gA( io::readWkt( "POLYGON((0 0,10 0,10 10,0 10,0 0))" ) );

	std::auto_ptr< MultiPolygon > result( algorithm::offset( *gA, 1.0 ) ) ;
	BOOST_CHECK_EQUAL(result->asText(7), "MULTIPOLYGON(((-1.0000000 10.0000000,-1.0000000 0.0000000,-0.8750000 -0.4841229,-0.7500000 -0.6614378,-0.6250000 -0.7806247,-0.5000000 -0.8660254,-0.3750000 -0.9270248,-0.2500000 -0.9682458,-0.1250000 -0.9921567,0.0000000 -1.0000000,10.0000000 -1.0000000,10.1250000 -0.9921567,10.2500000 -0.9682458,10.3750000 -0.9270248,10.5000000 -0.8660254,10.6250000 -0.7806247,10.7500000 -0.6614378,10.8750000 -0.4841229,11.0000000 0.0000000,11.0000000 10.0000000,10.8750000 10.4841229,10.7500000 10.6614378,10.6250000 10.7806247,10.5000000 10.8660254,10.3750000 10.9270248,10.2500000 10.9682458,10.1250000 10.9921567,10.0000000 11.0000000,0.0000000 11.0000000,-0.1250000 10.9921567,-0.2500000 10.9682458,-0.3750000 10.9270248,-0.5000000 10.8660254,-0.6250000 10.7806247,-0.7500000 10.6614378,-0.8750000 10.4841229,-1.0000000 10.0000000)))") ;
}

BOOST_AUTO_TEST_CASE( testHoles )
{
	std::auto_ptr< Geometry > gA( io::readWkt( "POLYGON((13.652901 8.978070,13.921068 13.219992,20.454603 13.268750,18.967492 11.001516,16.432091 11.220926,15.091253 13.024961,14.481782 11.976670,14.676813 10.708970,15.798240 9.392511,16.358954 9.416890,16.870910 10.075119,16.797774 10.952758,17.431624 11.001516,18.162990 10.099498,18.138611 8.368599,14.774328 9.416890,14.530540 8.929313,13.945447 8.441735,13.652901 8.978070))" ) );

	std::auto_ptr< MultiPolygon > result( algorithm::offset( *gA, 1.0 ) ) ;
	BOOST_CHECK_EQUAL(result->asText(7), "MULTIPOLYGON(((12.6548933 9.0411622,12.6546443 9.0370910,12.6543952 9.0327163,12.6541462 9.0279581,12.6538971 9.0226940,12.6536481 9.0167180,12.6533991 9.0096279,12.6531500 9.0003862,12.6529010 8.9780700,12.6681608 8.8040392,12.6834206 8.7329012,12.6986804 8.6789664,12.7139402 8.6340460,12.7292000 8.5949559,12.7444597 8.5600575,12.7597195 8.5283736,12.7749793 8.4992657,12.8512192 8.3594745,13.0675603 7.9628666,13.2573163 7.7161482,13.4470723 7.5747732,13.6368284 7.4905491,13.8265844 7.4488243,14.0163404 7.4442511,14.2060965 7.4763015,14.3958525 7.5489109,14.5856085 7.6734947,14.6908880 7.7612223,15.1707299 8.1610963,15.1793698 8.1683794,15.1880096 8.1758320,15.1966495 8.1834591,15.2052894 8.1912661,15.2139293 8.1992588,15.2225692 8.2074435,15.2312091 8.2158266,15.2398489 8.2244152,16.6593977 7.7820920,17.8411241 7.4138731,18.0032975 7.3777962,18.1654710 7.3689598,18.3276445 7.3866284,18.4898179 7.4323011,18.6519914 7.5104378,18.8141649 7.6312884,18.9763383 7.8225103,19.1385118 8.3545134,19.1505317 9.2077770,19.1619782 10.0206108,19.2421894 10.0399853,19.3224005 10.0666150,19.4026117 10.1011434,19.4828228 10.1445247,19.5630339 10.1981918,19.6432451 10.2643879,19.7234562 10.3469031,19.8036674 10.4530538,20.1394144 10.9649275,21.2907801 12.7202904,21.3112579 12.7528602,21.3317358 12.7885021,21.3522137 12.8279608,21.3726915 12.8723746,21.3931694 12.9236513,21.4136473 12.9854938,21.4341251 13.0674135,21.4546030 13.2687500,21.3286702 13.7545551,21.2027374 13.9322973,21.0768046 14.0516071,20.9508718 14.1369189,20.8249389 14.1976479,20.6990061 14.2384237,20.5730733 14.2617076,20.4471405 14.2687222,17.1559947 14.2441613,13.9136054 14.2199642,13.7897873 14.2113372,13.6659692 14.1869070,13.5421510 14.1454227,13.4183329 14.0844325,13.2945147 13.9993706,13.1706966 13.8810085,13.0468785 13.7055768,12.9230603 13.2830844,12.7805169 11.0283070,12.6548933 9.0411622)))" ) ;
}

BOOST_AUTO_TEST_CASE( testLineString )
{
	std::auto_ptr< Geometry > gA( io::readWkt( "LINESTRING(13.652901 8.978070,13.921068 13.219992,20.454603 13.268750,18.967492 11.001516,16.432091 11.220926,15.091253 13.024961,14.481782 11.976670,14.676813 10.708970,15.798240 9.392511,16.358954 9.416890,16.870910 10.075119,16.797774 10.952758,17.431624 11.001516,18.162990 10.099498,18.138611 8.368599,14.774328 9.416890,14.530540 8.929313,13.945447 8.441735,13.652901 8.978070)" ) );
	std::auto_ptr< MultiPolygon > result( algorithm::offset( *gA, 0.5 ) ) ;
	BOOST_CHECK_EQUAL( result->asText(7), "MULTIPOLYGON(((20.9546030 13.2687500,20.8916366 13.5116525,20.8286702 13.6005236,20.7657038 13.6601785,20.7027374 13.7028345,20.6397710 13.7331989,20.5768046 13.7535869,20.5138382 13.7652288,20.4508718 13.7687361,17.1597259 13.7441753,13.9173367 13.7199781,13.8554277 13.7156646,13.7935186 13.7034495,13.7316095 13.6827073,13.6697004 13.6522123,13.6077914 13.6096813,13.5458823 13.5505002,13.4839732 13.4627844,13.4220642 13.2515382,13.2795207 10.9967608,13.1538971 9.0096161,13.1537726 9.0075805,13.1536481 9.0053931,13.1535236 9.0030140,13.1533991 9.0003820,13.1532746 8.9973940,13.1531500 8.9938489,13.1530255 8.9892281,13.1529010 8.9780700,13.1605309 8.8910546,13.1681608 8.8554856,13.1757907 8.8285182,13.1834206 8.8060580,13.1910505 8.7865130,13.1986804 8.7690637,13.2063103 8.7532218,13.2139402 8.7386679,13.2901713 8.5988927,13.5065036 8.2023008,13.6013817 8.0789416,13.6962597 8.0082541,13.7911377 7.9661421,13.8860157 7.9452796,13.9808937 7.9429931,14.0757717 7.9590182,14.1706498 7.9953229,14.2655278 8.0576148,14.3708002 8.1453365,14.8506349 8.5452046,14.8665248 8.5590236,14.8824146 8.5740888,14.8983045 8.5905664,14.9141943 8.6086740,14.9300842 8.6287062,14.9459740 8.6510783,14.9618639 8.6764104,14.9777537 8.7057064,15.0314338 8.8130668,16.8081412 8.2594549,17.9898675 7.8912361,18.0709543 7.8731976,18.1520410 7.8687794,18.2331277 7.8776137,18.3142145 7.9004501,18.3953012 7.9395184,18.4763879 7.9999437,18.5574747 8.0955546,18.6385614 8.3615562,18.6505813 9.2148186,18.6629404 10.0924576,18.6629466 10.0929123,18.6629528 10.0934008,18.6629590 10.0939320,18.6629652 10.0945196,18.6629714 10.0951866,18.6629776 10.0959777,18.6629838 10.0970088,18.6629900 10.0994980,18.6490372 10.2167929,18.6350845 10.2642002,18.6211317 10.2997633,18.6071789 10.3290545,18.5932262 10.3542466,18.5792734 10.3764603,18.5653206 10.3963651,18.5513679 10.4143990,18.4456305 10.5448084,18.9243838 10.5033778,18.9820333 10.5017275,19.0396828 10.5067550,19.0973323 10.5186687,19.1549818 10.5379995,19.2126312 10.5657331,19.2702807 10.6036228,19.3279302 10.6549842,19.3855797 10.7272849,19.7213263 11.2391580,20.8726915 12.9945202,20.8829305 13.0108051,20.8931694 13.0286260,20.9034083 13.0483554,20.9136473 13.0705623,20.9238862 13.0962006,20.9341251 13.1271219,20.9443641 13.1680817,20.9546030 13.2687500),(14.4933005 10.1533469,14.6995207 9.9112622,14.6529699 9.9019387,14.6064191 9.8878535,14.5598683 9.8685614,14.5133175 9.8433563,14.4667667 9.8111057,14.4202159 9.7698838,14.3736651 9.7160040,14.3271142 9.6404965,14.1767673 9.3398020,14.2471573 10.4532437,14.2532865 10.4432158,14.2594156 10.4336893,14.2655448 10.4246137,14.2716740 10.4159471,14.2778032 10.4076543,14.2839324 10.3997051,14.2900615 10.3920736,14.2961907 10.3847375,14.4933005 10.1533469),(16.3330313 10.5088578,16.3564315 10.2280600,16.1062333 9.9063813,16.0446992 9.9037077,16.0204939 9.9026545,15.2545447 10.8018136,15.1494276 10.9252117,15.0586554 11.5152302,15.0028310 11.8780880,15.0656050 11.9860593,15.1423368 12.1180381,16.0307937 10.9226635,16.0662176 10.8801377,16.1016414 10.8456886,16.1370653 10.8172432,16.1724892 10.7936007,16.2079130 10.7739985,16.2433369 10.7579229,16.2787607 10.7450165,16.3141846 10.7350268,16.3330313 10.5088578),(17.1671884 12.7442029,19.5241216 12.7617921,18.8851471 11.7876198,18.7131511 11.5253950,17.8521962 11.5999009,16.6992425 11.6996758,15.9297694 12.7349684,17.1671884 12.7442029),(17.3535812 10.3038685,17.6604872 9.9253511,17.6506763 9.2289018,17.6480888 9.0451535,17.1056283 9.2141811,16.8875736 9.2821256,17.2655882 9.7681514,17.2787535 9.7858722,17.2919187 9.8053938,17.3050839 9.8271411,17.3182491 9.8517634,17.3314143 9.8803480,17.3445796 9.9150030,17.3577448 9.9611370,17.3709100 10.0751190,17.3706941 10.0898101,17.3704782 10.0958931,17.3702624 10.1005593,17.3700465 10.1044917,17.3698306 10.1079552,17.3696147 10.1110853,17.3693989 10.1139629,17.3691830 10.1166403,17.3535812 10.3038685)))" );
}

BOOST_AUTO_TEST_CASE( testPolygonWithHoles )
{
	std::auto_ptr< Geometry > gA( io::readWkt( "POLYGON((11.966308 -10.211022,18.007885 1.872133,39.364158 2.434140,53.554839 -6.557975,43.438710 -22.856183,20.396416 -28.476254,5.643728 -25.525717,13.090323 -20.889158,32.479570 -21.310663,38.521147 -15.831093,46.248746 -9.087007,34.446595 -1.359409,22.784946 -14.988082,11.966308 -10.211022),(20.396416 -1.640412,15.900358 -7.260484,18.007885 -9.508513,22.644444 -9.368011,25.173477 -2.342921,20.396416 -1.640412),(41.050179 -0.797401,40.207168 -2.202419,47.934767 -6.557975,48.496774 -5.433961,41.050179 -0.797401))" ) );
	std::auto_ptr< MultiPolygon > result( algorithm::offset( *gA, 0.5 ) ) ;
	BOOST_CHECK_EQUAL(result->asText(7), "MULTIPOLYGON(((5.3794487 -25.1012686,5.3499836 -25.1211009,5.3205185 -25.1442257,5.2910534 -25.1712870,5.2615883 -25.2032743,5.2321233 -25.2418481,5.2026582 -25.2902230,5.1731931 -25.3566108,5.1437280 -25.5257170,5.1939707 -25.7441624,5.2442135 -25.8263632,5.2944562 -25.8835008,5.3446990 -25.9264434,5.3949417 -25.9594282,5.4451845 -25.9846075,5.4954272 -26.0032176,5.5456699 -26.0160073,14.3686337 -27.7806001,20.2983580 -28.9665443,20.3254250 -28.9711886,20.3524920 -28.9743209,20.3795590 -28.9759698,20.4066260 -28.9761497,20.4336930 -28.9748625,20.4607601 -28.9720966,20.4878271 -28.9678270,20.5148941 -28.9620142,29.3060344 -26.8178339,43.5571881 -23.3419432,43.5954808 -23.3309702,43.6337736 -23.3165635,43.6720663 -23.2983875,43.7103591 -23.2759529,43.7486518 -23.2485299,43.7869446 -23.2149764,43.8252373 -23.1733527,43.8635301 -23.1198644,46.2541592 -19.2682952,53.9796591 -6.8216564,53.9890566 -6.8058764,53.9984541 -6.7886386,54.0078516 -6.7695870,54.0172490 -6.7481774,54.0266465 -6.7234974,54.0360440 -6.6937753,54.0454415 -6.6544591,54.0548390 -6.5579750,54.0257922 -6.3900372,53.9967454 -6.3240546,53.9676986 -6.2759343,53.9386518 -6.2375257,53.9096050 -6.2056383,53.8805581 -6.1786242,53.8515113 -6.1555007,53.8224645 -6.1356285,50.5249125 -4.0460904,39.6317835 2.8564865,39.5966863 2.8767805,39.5615890 2.8935102,39.5264917 2.9070541,39.4913944 2.9176800,39.4562972 2.9255771,39.4211999 2.9308756,39.3861026 2.9336582,39.3510054 2.9339670,28.3919615 2.6455863,17.9947309 2.3719599,17.9404735 2.3675678,17.8862161 2.3571038,17.8319586 2.3401607,17.7777012 2.3159972,17.7234437 2.2833424,17.6691863 2.2399416,17.6149288 2.1813020,17.5606714 2.0957398,13.1889450 -6.6477130,11.5190944 -9.9874153,11.5124961 -10.0011298,11.5058978 -10.0160286,11.4992995 -10.0324078,11.4927012 -10.0507204,11.4861029 -10.0717272,11.4795046 -10.0969061,11.4729063 -10.1300605,11.4663080 -10.2110220,11.5035622 -10.4004061,11.5408164 -10.4736185,11.5780706 -10.5260962,11.6153248 -10.5671271,11.6525791 -10.6003472,11.6898333 -10.6276294,11.7270875 -10.6500818,11.7643417 -10.6684164,19.3586610 -14.0217516,22.5829797 -15.4454764,22.6557136 -15.4710923,22.7284474 -15.4848797,22.8011813 -15.4878183,22.8739152 -15.4801028,22.9466490 -15.4612121,23.0193829 -15.4297146,23.0921167 -15.3826021,23.1648506 -15.3131551,25.2047874 -12.9291328,34.5406010 -2.0186045,43.3063034 -7.7580521,45.4230246 -9.1440001,39.5155988 -14.2995711,38.1923798 -15.4543807,38.1914873 -15.4551615,38.1905948 -15.4559461,38.1897022 -15.4567344,38.1888097 -15.4575265,38.1879172 -15.4583225,38.1870246 -15.4591223,38.1861321 -15.4599259,38.1852396 -15.4607335,33.1350397 -20.0411467,32.2912436 -20.8064508,23.0065162 -20.6046091,13.1011900 -20.3892761,13.0667967 -20.3897118,13.0324034 -20.3925240,12.9980102 -20.3977535,12.9636169 -20.4054788,12.9292236 -20.4158220,12.8948304 -20.4289595,12.8604371 -20.4451395,12.8260438 -20.4647095,7.1347657 -24.0083349,5.3794487 -25.1012686),(46.4771776 -4.7654765,47.8458893 -5.6176929,47.7225345 -5.8644005,46.2136502 -5.0139383,40.9002483 -2.0191117,41.2174024 -1.4905210,46.4771776 -4.7654765),(23.0597163 -2.5374515,24.4959945 -2.7486689,23.0102003 -6.8758738,22.2892385 -8.8785453,20.2408011 -8.9406190,18.2183079 -9.0019070,16.5981780 -7.2737682,16.5614147 -7.2345540,17.1344892 -6.5182117,20.6075831 -2.1768436,23.0597163 -2.5374515)))" );
}


BOOST_AUTO_TEST_CASE( testMultiPoint )
{
	std::auto_ptr< Geometry > gA( io::readWkt( "MULTIPOINT(2 0,1 1,0 2,-1 1,-2 0,-1 -1,0 -2,1 -1)" ) );
	std::auto_ptr< MultiPolygon > result( algorithm::offset( *gA, 1.0 ) ) ;
	BOOST_CHECK_EQUAL(result->asText(7), "MULTIPOLYGON(((3.0000000 0.0000000,2.8750000 0.4841229,2.7500000 0.6614378,2.6250000 0.7806247,2.5000000 0.8660254,2.3750000 0.9270248,2.2500000 0.9682458,2.1250000 0.9921567,2.0000000 1.0000000,1.8750000 1.4841229,1.7500000 1.6614378,1.6250000 1.7806247,1.5000000 1.8660254,1.3750000 1.9270248,1.2500000 1.9682458,1.1250000 1.9921567,1.0000000 2.0000000,0.7500000 2.6614378,0.5000000 2.8660254,0.2500000 2.9682458,0.0000000 3.0000000,-0.2500000 2.9682458,-0.5000000 2.8660254,-0.7500000 2.6614378,-1.0000000 2.0000000,-1.1250000 1.9921567,-1.2500000 1.9682458,-1.3750000 1.9270248,-1.5000000 1.8660254,-1.6250000 1.7806247,-1.7500000 1.6614378,-1.8750000 1.4841229,-2.0000000 1.0000000,-2.1250000 0.9921567,-2.2500000 0.9682458,-2.3750000 0.9270248,-2.5000000 0.8660254,-2.6250000 0.7806247,-2.7500000 0.6614378,-2.8750000 0.4841229,-3.0000000 0.0000000,-2.8750000 -0.4841229,-2.7500000 -0.6614378,-2.6250000 -0.7806247,-2.5000000 -0.8660254,-2.3750000 -0.9270248,-2.2500000 -0.9682458,-2.1250000 -0.9921567,-2.0000000 -1.0000000,-1.8750000 -1.4841229,-1.7500000 -1.6614378,-1.6250000 -1.7806247,-1.5000000 -1.8660254,-1.3750000 -1.9270248,-1.2500000 -1.9682458,-1.1250000 -1.9921567,-1.0000000 -2.0000000,-0.7500000 -2.6614378,-0.5000000 -2.8660254,-0.2500000 -2.9682458,0.0000000 -3.0000000,0.2500000 -2.9682458,0.5000000 -2.8660254,0.7500000 -2.6614378,1.0000000 -2.0000000,1.1250000 -1.9921567,1.2500000 -1.9682458,1.3750000 -1.9270248,1.5000000 -1.8660254,1.6250000 -1.7806247,1.7500000 -1.6614378,1.8750000 -1.4841229,2.0000000 -1.0000000,2.1250000 -0.9921567,2.2500000 -0.9682458,2.3750000 -0.9270248,2.5000000 -0.8660254,2.6250000 -0.7806247,2.7500000 -0.6614378,2.8750000 -0.4841229,3.0000000 0.0000000),(0.0000000 1.0000000,0.1250000 0.5158771,0.2500000 0.3385622,0.3750000 0.2193753,0.5000000 0.1339746,0.6250000 0.0729752,0.7500000 0.0317542,0.8750000 0.0078433,1.0000000 0.0000000,0.8750000 -0.0078433,0.7500000 -0.0317542,0.6250000 -0.0729752,0.5000000 -0.1339746,0.3750000 -0.2193753,0.2500000 -0.3385622,0.1250000 -0.5158771,0.0000000 -1.0000000,-0.1250000 -0.5158771,-0.2500000 -0.3385622,-0.3750000 -0.2193753,-0.5000000 -0.1339746,-0.6250000 -0.0729752,-0.7500000 -0.0317542,-0.8750000 -0.0078433,-1.0000000 0.0000000,-0.8750000 0.0078433,-0.7500000 0.0317542,-0.6250000 0.0729752,-0.5000000 0.1339746,-0.3750000 0.2193753,-0.2500000 0.3385622,-0.1250000 0.5158771,0.0000000 1.0000000)))" );
}

BOOST_AUTO_TEST_SUITE_END()

